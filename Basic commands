To force stop postgres server
#brew services stop postgresql
#then restart again


SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index

*********Basic PSQL commands*********

#clear psql screen
\! clear

#Delete table
DROP TABLE tablename;

#Delete DB
DROP DATABASE dbname;

list all databases
#\l

what are the tables in our database?
#\d

What columns does each table have?
#\d tablename

Connect to the database
#\c databasename

#Explore heading in the table
SELECT * FROM tablename LIMIT 10;

#To list column names and datatypes in the table

\d tablename

OR

SELECT column_name, data_type
FROM   information_schema.columns
WHERE  table_name = 'tablename'
ORDER  BY ordinal_position;

#To find unique values
SELECT DISTINCT table_feature FROM tablename;

#count particular feature from colun
SELECT COUNT(*) FROM tablename WHERE columnname='feature';

#count all feature from column
SELECT id,COUNT (*)
FROM tablename
GROUP BY column_name;

#total of distinct features
SELECT COUNT (DISTINCT column_name) FROM table_name;

*****Inbuilt functions*******

#finding max and min
SELECT max(column_name) FROM table_name;
SELECT min(column_name) FROM table_name;

#finding average
SELECT avg(column_name) FROM table_name

#min,max,avg and group_by combined
SELECT column_name,min(column_name),max(column_name),avg(column_name)
FROM table_name
GROUP BY column2

#Alias
SELECT
  column,
  AVG(column) AS Average_column,
  MIN(column) AS Minimum_column,
  MAX(column) AS Maximum_column
FROM meals
GROUP BY type;

#how to seperate month and year from the date field

date_part('Year',date_column) condition
daste_part('Minth,date_columns) condition

#ORDER BY
SELECT * FROM tablename
ORDER BY column1 ASC, column2 DESC;

#CASE
SELECT
    meal_id,
    SUM(CASE WHEN columnname='' THEN 1 ELSE 0 END) AS alias,
    SUM(CASE WHEN columname='like' THEN 1 ELSE 0 END) AS alias,
    SUM(CASE WHEN columnname='share' THEN 1 ELSE 0 END) AS alias
FROM tablename
GROUP BY columname
ORDER BY columnname ASC;


SELECT
    type,
    AVG(price) AS avg_price,
    MIN(price) AS min_price,
    MAX(price) AS max_price
FROM meals
WHERE
    date_part('year', dt)=2013 AND
    date_part('month', dt)<=3
GROUP BY type;

SELECT
    users.userid,
    users.campaign_id,
    events.meal_id,
    events.event
FROM users
JOIN events
ON users.userid=events.userid;


SELECT
    users.userid,
    users.campaign_id,
    events.meal_id,
    events.event
FROM users
JOIN events
ON users.userid=events.userid;


SELECT * FROM Customers;

  SELECT * FROM CUSTOMERS;
  WHERE City = 'Berlin' AND PostalCode=12209

SELECT COUNT(*)
FROM Products
WHERE Price = 18;
